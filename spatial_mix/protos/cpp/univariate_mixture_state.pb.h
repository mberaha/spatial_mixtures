// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: univariate_mixture_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_univariate_5fmixture_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_univariate_5fmixture_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eigen.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_univariate_5fmixture_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_univariate_5fmixture_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_univariate_5fmixture_5fstate_2eproto;
class UnivariateMixtureAtom;
class UnivariateMixtureAtomDefaultTypeInternal;
extern UnivariateMixtureAtomDefaultTypeInternal _UnivariateMixtureAtom_default_instance_;
class UnivariateMixtureState;
class UnivariateMixtureStateDefaultTypeInternal;
extern UnivariateMixtureStateDefaultTypeInternal _UnivariateMixtureState_default_instance_;
class UnivariateState;
class UnivariateStateDefaultTypeInternal;
extern UnivariateStateDefaultTypeInternal _UnivariateState_default_instance_;
class UnivariateState_GroupParams;
class UnivariateState_GroupParamsDefaultTypeInternal;
extern UnivariateState_GroupParamsDefaultTypeInternal _UnivariateState_GroupParams_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::UnivariateMixtureAtom* Arena::CreateMaybeMessage<::UnivariateMixtureAtom>(Arena*);
template<> ::UnivariateMixtureState* Arena::CreateMaybeMessage<::UnivariateMixtureState>(Arena*);
template<> ::UnivariateState* Arena::CreateMaybeMessage<::UnivariateState>(Arena*);
template<> ::UnivariateState_GroupParams* Arena::CreateMaybeMessage<::UnivariateState_GroupParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UnivariateMixtureAtom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnivariateMixtureAtom) */ {
 public:
  UnivariateMixtureAtom();
  virtual ~UnivariateMixtureAtom();

  UnivariateMixtureAtom(const UnivariateMixtureAtom& from);
  UnivariateMixtureAtom(UnivariateMixtureAtom&& from) noexcept
    : UnivariateMixtureAtom() {
    *this = ::std::move(from);
  }

  inline UnivariateMixtureAtom& operator=(const UnivariateMixtureAtom& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnivariateMixtureAtom& operator=(UnivariateMixtureAtom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnivariateMixtureAtom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnivariateMixtureAtom* internal_default_instance() {
    return reinterpret_cast<const UnivariateMixtureAtom*>(
               &_UnivariateMixtureAtom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnivariateMixtureAtom& a, UnivariateMixtureAtom& b) {
    a.Swap(&b);
  }
  inline void Swap(UnivariateMixtureAtom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnivariateMixtureAtom* New() const final {
    return CreateMaybeMessage<UnivariateMixtureAtom>(nullptr);
  }

  UnivariateMixtureAtom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnivariateMixtureAtom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnivariateMixtureAtom& from);
  void MergeFrom(const UnivariateMixtureAtom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnivariateMixtureAtom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnivariateMixtureAtom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_univariate_5fmixture_5fstate_2eproto);
    return ::descriptor_table_univariate_5fmixture_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kStdevFieldNumber = 2,
  };
  // double mean = 1;
  void clear_mean();
  double mean() const;
  void set_mean(double value);
  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);
  public:

  // double stdev = 2;
  void clear_stdev();
  double stdev() const;
  void set_stdev(double value);
  private:
  double _internal_stdev() const;
  void _internal_set_stdev(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnivariateMixtureAtom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double mean_;
  double stdev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_univariate_5fmixture_5fstate_2eproto;
};
// -------------------------------------------------------------------

class UnivariateMixtureState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnivariateMixtureState) */ {
 public:
  UnivariateMixtureState();
  virtual ~UnivariateMixtureState();

  UnivariateMixtureState(const UnivariateMixtureState& from);
  UnivariateMixtureState(UnivariateMixtureState&& from) noexcept
    : UnivariateMixtureState() {
    *this = ::std::move(from);
  }

  inline UnivariateMixtureState& operator=(const UnivariateMixtureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnivariateMixtureState& operator=(UnivariateMixtureState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnivariateMixtureState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnivariateMixtureState* internal_default_instance() {
    return reinterpret_cast<const UnivariateMixtureState*>(
               &_UnivariateMixtureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnivariateMixtureState& a, UnivariateMixtureState& b) {
    a.Swap(&b);
  }
  inline void Swap(UnivariateMixtureState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnivariateMixtureState* New() const final {
    return CreateMaybeMessage<UnivariateMixtureState>(nullptr);
  }

  UnivariateMixtureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnivariateMixtureState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnivariateMixtureState& from);
  void MergeFrom(const UnivariateMixtureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnivariateMixtureState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnivariateMixtureState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_univariate_5fmixture_5fstate_2eproto);
    return ::descriptor_table_univariate_5fmixture_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 2,
    kAtomsFieldNumber = 3,
    kNumComponentsFieldNumber = 1,
  };
  // repeated double weights = 2 [packed = true];
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  double _internal_weights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_weights() const;
  void _internal_add_weights(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_weights();
  public:
  double weights(int index) const;
  void set_weights(int index, double value);
  void add_weights(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_weights();

  // repeated .UnivariateMixtureAtom atoms = 3;
  int atoms_size() const;
  private:
  int _internal_atoms_size() const;
  public:
  void clear_atoms();
  ::UnivariateMixtureAtom* mutable_atoms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >*
      mutable_atoms();
  private:
  const ::UnivariateMixtureAtom& _internal_atoms(int index) const;
  ::UnivariateMixtureAtom* _internal_add_atoms();
  public:
  const ::UnivariateMixtureAtom& atoms(int index) const;
  ::UnivariateMixtureAtom* add_atoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >&
      atoms() const;

  // int32 num_components = 1;
  void clear_num_components();
  ::PROTOBUF_NAMESPACE_ID::int32 num_components() const;
  void set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_components() const;
  void _internal_set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UnivariateMixtureState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom > atoms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_components_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_univariate_5fmixture_5fstate_2eproto;
};
// -------------------------------------------------------------------

class UnivariateState_GroupParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnivariateState.GroupParams) */ {
 public:
  UnivariateState_GroupParams();
  virtual ~UnivariateState_GroupParams();

  UnivariateState_GroupParams(const UnivariateState_GroupParams& from);
  UnivariateState_GroupParams(UnivariateState_GroupParams&& from) noexcept
    : UnivariateState_GroupParams() {
    *this = ::std::move(from);
  }

  inline UnivariateState_GroupParams& operator=(const UnivariateState_GroupParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnivariateState_GroupParams& operator=(UnivariateState_GroupParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnivariateState_GroupParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnivariateState_GroupParams* internal_default_instance() {
    return reinterpret_cast<const UnivariateState_GroupParams*>(
               &_UnivariateState_GroupParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnivariateState_GroupParams& a, UnivariateState_GroupParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnivariateState_GroupParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnivariateState_GroupParams* New() const final {
    return CreateMaybeMessage<UnivariateState_GroupParams>(nullptr);
  }

  UnivariateState_GroupParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnivariateState_GroupParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnivariateState_GroupParams& from);
  void MergeFrom(const UnivariateState_GroupParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnivariateState_GroupParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnivariateState.GroupParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_univariate_5fmixture_5fstate_2eproto);
    return ::descriptor_table_univariate_5fmixture_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
    kClusterAllocsFieldNumber = 2,
  };
  // repeated double weights = 1 [packed = true];
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  double _internal_weights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_weights() const;
  void _internal_add_weights(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_weights();
  public:
  double weights(int index) const;
  void set_weights(int index, double value);
  void add_weights(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_weights();

  // repeated int32 cluster_allocs = 2 [packed = true];
  int cluster_allocs_size() const;
  private:
  int _internal_cluster_allocs_size() const;
  public:
  void clear_cluster_allocs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cluster_allocs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cluster_allocs() const;
  void _internal_add_cluster_allocs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cluster_allocs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cluster_allocs(int index) const;
  void set_cluster_allocs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cluster_allocs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cluster_allocs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cluster_allocs();

  // @@protoc_insertion_point(class_scope:UnivariateState.GroupParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cluster_allocs_;
  mutable std::atomic<int> _cluster_allocs_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_univariate_5fmixture_5fstate_2eproto;
};
// -------------------------------------------------------------------

class UnivariateState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnivariateState) */ {
 public:
  UnivariateState();
  virtual ~UnivariateState();

  UnivariateState(const UnivariateState& from);
  UnivariateState(UnivariateState&& from) noexcept
    : UnivariateState() {
    *this = ::std::move(from);
  }

  inline UnivariateState& operator=(const UnivariateState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnivariateState& operator=(UnivariateState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnivariateState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnivariateState* internal_default_instance() {
    return reinterpret_cast<const UnivariateState*>(
               &_UnivariateState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnivariateState& a, UnivariateState& b) {
    a.Swap(&b);
  }
  inline void Swap(UnivariateState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnivariateState* New() const final {
    return CreateMaybeMessage<UnivariateState>(nullptr);
  }

  UnivariateState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnivariateState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnivariateState& from);
  void MergeFrom(const UnivariateState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnivariateState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnivariateState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_univariate_5fmixture_5fstate_2eproto);
    return ::descriptor_table_univariate_5fmixture_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnivariateState_GroupParams GroupParams;

  // accessors -------------------------------------------------------

  enum : int {
    kAtomsFieldNumber = 2,
    kGroupParamsFieldNumber = 3,
    kSigmaFieldNumber = 5,
    kRhoFieldNumber = 4,
    kNumComponentsFieldNumber = 1,
  };
  // repeated .UnivariateMixtureAtom atoms = 2;
  int atoms_size() const;
  private:
  int _internal_atoms_size() const;
  public:
  void clear_atoms();
  ::UnivariateMixtureAtom* mutable_atoms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >*
      mutable_atoms();
  private:
  const ::UnivariateMixtureAtom& _internal_atoms(int index) const;
  ::UnivariateMixtureAtom* _internal_add_atoms();
  public:
  const ::UnivariateMixtureAtom& atoms(int index) const;
  ::UnivariateMixtureAtom* add_atoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >&
      atoms() const;

  // repeated .UnivariateState.GroupParams groupParams = 3;
  int groupparams_size() const;
  private:
  int _internal_groupparams_size() const;
  public:
  void clear_groupparams();
  ::UnivariateState_GroupParams* mutable_groupparams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateState_GroupParams >*
      mutable_groupparams();
  private:
  const ::UnivariateState_GroupParams& _internal_groupparams(int index) const;
  ::UnivariateState_GroupParams* _internal_add_groupparams();
  public:
  const ::UnivariateState_GroupParams& groupparams(int index) const;
  ::UnivariateState_GroupParams* add_groupparams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateState_GroupParams >&
      groupparams() const;

  // .EigenMatrix Sigma = 5;
  bool has_sigma() const;
  private:
  bool _internal_has_sigma() const;
  public:
  void clear_sigma();
  const ::EigenMatrix& sigma() const;
  ::EigenMatrix* release_sigma();
  ::EigenMatrix* mutable_sigma();
  void set_allocated_sigma(::EigenMatrix* sigma);
  private:
  const ::EigenMatrix& _internal_sigma() const;
  ::EigenMatrix* _internal_mutable_sigma();
  public:

  // double rho = 4;
  void clear_rho();
  double rho() const;
  void set_rho(double value);
  private:
  double _internal_rho() const;
  void _internal_set_rho(double value);
  public:

  // int32 num_components = 1;
  void clear_num_components();
  ::PROTOBUF_NAMESPACE_ID::int32 num_components() const;
  void set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_components() const;
  void _internal_set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UnivariateState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom > atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateState_GroupParams > groupparams_;
  ::EigenMatrix* sigma_;
  double rho_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_components_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_univariate_5fmixture_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnivariateMixtureAtom

// double mean = 1;
inline void UnivariateMixtureAtom::clear_mean() {
  mean_ = 0;
}
inline double UnivariateMixtureAtom::_internal_mean() const {
  return mean_;
}
inline double UnivariateMixtureAtom::mean() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureAtom.mean)
  return _internal_mean();
}
inline void UnivariateMixtureAtom::_internal_set_mean(double value) {
  
  mean_ = value;
}
inline void UnivariateMixtureAtom::set_mean(double value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureAtom.mean)
}

// double stdev = 2;
inline void UnivariateMixtureAtom::clear_stdev() {
  stdev_ = 0;
}
inline double UnivariateMixtureAtom::_internal_stdev() const {
  return stdev_;
}
inline double UnivariateMixtureAtom::stdev() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureAtom.stdev)
  return _internal_stdev();
}
inline void UnivariateMixtureAtom::_internal_set_stdev(double value) {
  
  stdev_ = value;
}
inline void UnivariateMixtureAtom::set_stdev(double value) {
  _internal_set_stdev(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureAtom.stdev)
}

// -------------------------------------------------------------------

// UnivariateMixtureState

// int32 num_components = 1;
inline void UnivariateMixtureState::clear_num_components() {
  num_components_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::_internal_num_components() const {
  return num_components_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateMixtureState::num_components() const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.num_components)
  return _internal_num_components();
}
inline void UnivariateMixtureState::_internal_set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_components_ = value;
}
inline void UnivariateMixtureState::set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_components(value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.num_components)
}

// repeated double weights = 2 [packed = true];
inline int UnivariateMixtureState::_internal_weights_size() const {
  return weights_.size();
}
inline int UnivariateMixtureState::weights_size() const {
  return _internal_weights_size();
}
inline void UnivariateMixtureState::clear_weights() {
  weights_.Clear();
}
inline double UnivariateMixtureState::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline double UnivariateMixtureState::weights(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.weights)
  return _internal_weights(index);
}
inline void UnivariateMixtureState::set_weights(int index, double value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnivariateMixtureState.weights)
}
inline void UnivariateMixtureState::_internal_add_weights(double value) {
  weights_.Add(value);
}
inline void UnivariateMixtureState::add_weights(double value) {
  _internal_add_weights(value);
  // @@protoc_insertion_point(field_add:UnivariateMixtureState.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
UnivariateMixtureState::_internal_weights() const {
  return weights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
UnivariateMixtureState::weights() const {
  // @@protoc_insertion_point(field_list:UnivariateMixtureState.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
UnivariateMixtureState::_internal_mutable_weights() {
  return &weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
UnivariateMixtureState::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateMixtureState.weights)
  return _internal_mutable_weights();
}

// repeated .UnivariateMixtureAtom atoms = 3;
inline int UnivariateMixtureState::_internal_atoms_size() const {
  return atoms_.size();
}
inline int UnivariateMixtureState::atoms_size() const {
  return _internal_atoms_size();
}
inline void UnivariateMixtureState::clear_atoms() {
  atoms_.Clear();
}
inline ::UnivariateMixtureAtom* UnivariateMixtureState::mutable_atoms(int index) {
  // @@protoc_insertion_point(field_mutable:UnivariateMixtureState.atoms)
  return atoms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >*
UnivariateMixtureState::mutable_atoms() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateMixtureState.atoms)
  return &atoms_;
}
inline const ::UnivariateMixtureAtom& UnivariateMixtureState::_internal_atoms(int index) const {
  return atoms_.Get(index);
}
inline const ::UnivariateMixtureAtom& UnivariateMixtureState::atoms(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateMixtureState.atoms)
  return _internal_atoms(index);
}
inline ::UnivariateMixtureAtom* UnivariateMixtureState::_internal_add_atoms() {
  return atoms_.Add();
}
inline ::UnivariateMixtureAtom* UnivariateMixtureState::add_atoms() {
  // @@protoc_insertion_point(field_add:UnivariateMixtureState.atoms)
  return _internal_add_atoms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >&
UnivariateMixtureState::atoms() const {
  // @@protoc_insertion_point(field_list:UnivariateMixtureState.atoms)
  return atoms_;
}

// -------------------------------------------------------------------

// UnivariateState_GroupParams

// repeated double weights = 1 [packed = true];
inline int UnivariateState_GroupParams::_internal_weights_size() const {
  return weights_.size();
}
inline int UnivariateState_GroupParams::weights_size() const {
  return _internal_weights_size();
}
inline void UnivariateState_GroupParams::clear_weights() {
  weights_.Clear();
}
inline double UnivariateState_GroupParams::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline double UnivariateState_GroupParams::weights(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateState.GroupParams.weights)
  return _internal_weights(index);
}
inline void UnivariateState_GroupParams::set_weights(int index, double value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnivariateState.GroupParams.weights)
}
inline void UnivariateState_GroupParams::_internal_add_weights(double value) {
  weights_.Add(value);
}
inline void UnivariateState_GroupParams::add_weights(double value) {
  _internal_add_weights(value);
  // @@protoc_insertion_point(field_add:UnivariateState.GroupParams.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
UnivariateState_GroupParams::_internal_weights() const {
  return weights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
UnivariateState_GroupParams::weights() const {
  // @@protoc_insertion_point(field_list:UnivariateState.GroupParams.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
UnivariateState_GroupParams::_internal_mutable_weights() {
  return &weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
UnivariateState_GroupParams::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateState.GroupParams.weights)
  return _internal_mutable_weights();
}

// repeated int32 cluster_allocs = 2 [packed = true];
inline int UnivariateState_GroupParams::_internal_cluster_allocs_size() const {
  return cluster_allocs_.size();
}
inline int UnivariateState_GroupParams::cluster_allocs_size() const {
  return _internal_cluster_allocs_size();
}
inline void UnivariateState_GroupParams::clear_cluster_allocs() {
  cluster_allocs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateState_GroupParams::_internal_cluster_allocs(int index) const {
  return cluster_allocs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateState_GroupParams::cluster_allocs(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateState.GroupParams.cluster_allocs)
  return _internal_cluster_allocs(index);
}
inline void UnivariateState_GroupParams::set_cluster_allocs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cluster_allocs_.Set(index, value);
  // @@protoc_insertion_point(field_set:UnivariateState.GroupParams.cluster_allocs)
}
inline void UnivariateState_GroupParams::_internal_add_cluster_allocs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cluster_allocs_.Add(value);
}
inline void UnivariateState_GroupParams::add_cluster_allocs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cluster_allocs(value);
  // @@protoc_insertion_point(field_add:UnivariateState.GroupParams.cluster_allocs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnivariateState_GroupParams::_internal_cluster_allocs() const {
  return cluster_allocs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnivariateState_GroupParams::cluster_allocs() const {
  // @@protoc_insertion_point(field_list:UnivariateState.GroupParams.cluster_allocs)
  return _internal_cluster_allocs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnivariateState_GroupParams::_internal_mutable_cluster_allocs() {
  return &cluster_allocs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnivariateState_GroupParams::mutable_cluster_allocs() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateState.GroupParams.cluster_allocs)
  return _internal_mutable_cluster_allocs();
}

// -------------------------------------------------------------------

// UnivariateState

// int32 num_components = 1;
inline void UnivariateState::clear_num_components() {
  num_components_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateState::_internal_num_components() const {
  return num_components_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnivariateState::num_components() const {
  // @@protoc_insertion_point(field_get:UnivariateState.num_components)
  return _internal_num_components();
}
inline void UnivariateState::_internal_set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_components_ = value;
}
inline void UnivariateState::set_num_components(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_components(value);
  // @@protoc_insertion_point(field_set:UnivariateState.num_components)
}

// repeated .UnivariateMixtureAtom atoms = 2;
inline int UnivariateState::_internal_atoms_size() const {
  return atoms_.size();
}
inline int UnivariateState::atoms_size() const {
  return _internal_atoms_size();
}
inline void UnivariateState::clear_atoms() {
  atoms_.Clear();
}
inline ::UnivariateMixtureAtom* UnivariateState::mutable_atoms(int index) {
  // @@protoc_insertion_point(field_mutable:UnivariateState.atoms)
  return atoms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >*
UnivariateState::mutable_atoms() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateState.atoms)
  return &atoms_;
}
inline const ::UnivariateMixtureAtom& UnivariateState::_internal_atoms(int index) const {
  return atoms_.Get(index);
}
inline const ::UnivariateMixtureAtom& UnivariateState::atoms(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateState.atoms)
  return _internal_atoms(index);
}
inline ::UnivariateMixtureAtom* UnivariateState::_internal_add_atoms() {
  return atoms_.Add();
}
inline ::UnivariateMixtureAtom* UnivariateState::add_atoms() {
  // @@protoc_insertion_point(field_add:UnivariateState.atoms)
  return _internal_add_atoms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateMixtureAtom >&
UnivariateState::atoms() const {
  // @@protoc_insertion_point(field_list:UnivariateState.atoms)
  return atoms_;
}

// repeated .UnivariateState.GroupParams groupParams = 3;
inline int UnivariateState::_internal_groupparams_size() const {
  return groupparams_.size();
}
inline int UnivariateState::groupparams_size() const {
  return _internal_groupparams_size();
}
inline void UnivariateState::clear_groupparams() {
  groupparams_.Clear();
}
inline ::UnivariateState_GroupParams* UnivariateState::mutable_groupparams(int index) {
  // @@protoc_insertion_point(field_mutable:UnivariateState.groupParams)
  return groupparams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateState_GroupParams >*
UnivariateState::mutable_groupparams() {
  // @@protoc_insertion_point(field_mutable_list:UnivariateState.groupParams)
  return &groupparams_;
}
inline const ::UnivariateState_GroupParams& UnivariateState::_internal_groupparams(int index) const {
  return groupparams_.Get(index);
}
inline const ::UnivariateState_GroupParams& UnivariateState::groupparams(int index) const {
  // @@protoc_insertion_point(field_get:UnivariateState.groupParams)
  return _internal_groupparams(index);
}
inline ::UnivariateState_GroupParams* UnivariateState::_internal_add_groupparams() {
  return groupparams_.Add();
}
inline ::UnivariateState_GroupParams* UnivariateState::add_groupparams() {
  // @@protoc_insertion_point(field_add:UnivariateState.groupParams)
  return _internal_add_groupparams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnivariateState_GroupParams >&
UnivariateState::groupparams() const {
  // @@protoc_insertion_point(field_list:UnivariateState.groupParams)
  return groupparams_;
}

// double rho = 4;
inline void UnivariateState::clear_rho() {
  rho_ = 0;
}
inline double UnivariateState::_internal_rho() const {
  return rho_;
}
inline double UnivariateState::rho() const {
  // @@protoc_insertion_point(field_get:UnivariateState.rho)
  return _internal_rho();
}
inline void UnivariateState::_internal_set_rho(double value) {
  
  rho_ = value;
}
inline void UnivariateState::set_rho(double value) {
  _internal_set_rho(value);
  // @@protoc_insertion_point(field_set:UnivariateState.rho)
}

// .EigenMatrix Sigma = 5;
inline bool UnivariateState::_internal_has_sigma() const {
  return this != internal_default_instance() && sigma_ != nullptr;
}
inline bool UnivariateState::has_sigma() const {
  return _internal_has_sigma();
}
inline const ::EigenMatrix& UnivariateState::_internal_sigma() const {
  const ::EigenMatrix* p = sigma_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EigenMatrix*>(
      &::_EigenMatrix_default_instance_);
}
inline const ::EigenMatrix& UnivariateState::sigma() const {
  // @@protoc_insertion_point(field_get:UnivariateState.Sigma)
  return _internal_sigma();
}
inline ::EigenMatrix* UnivariateState::release_sigma() {
  // @@protoc_insertion_point(field_release:UnivariateState.Sigma)
  
  ::EigenMatrix* temp = sigma_;
  sigma_ = nullptr;
  return temp;
}
inline ::EigenMatrix* UnivariateState::_internal_mutable_sigma() {
  
  if (sigma_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenMatrix>(GetArenaNoVirtual());
    sigma_ = p;
  }
  return sigma_;
}
inline ::EigenMatrix* UnivariateState::mutable_sigma() {
  // @@protoc_insertion_point(field_mutable:UnivariateState.Sigma)
  return _internal_mutable_sigma();
}
inline void UnivariateState::set_allocated_sigma(::EigenMatrix* sigma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigma_);
  }
  if (sigma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sigma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigma, submessage_arena);
    }
    
  } else {
    
  }
  sigma_ = sigma;
  // @@protoc_insertion_point(field_set_allocated:UnivariateState.Sigma)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_univariate_5fmixture_5fstate_2eproto
