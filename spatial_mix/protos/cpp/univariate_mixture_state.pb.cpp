// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: univariate_mixture_state.proto

#include "univariate_mixture_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eigen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EigenMatrix_eigen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_univariate_5fmixture_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_univariate_5fmixture_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto;
class UnivariateMixtureAtomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnivariateMixtureAtom> _instance;
} _UnivariateMixtureAtom_default_instance_;
class UnivariateMixtureStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnivariateMixtureState> _instance;
} _UnivariateMixtureState_default_instance_;
class UnivariateState_GroupParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnivariateState_GroupParams> _instance;
} _UnivariateState_GroupParams_default_instance_;
class UnivariateStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnivariateState> _instance;
} _UnivariateState_default_instance_;
static void InitDefaultsscc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnivariateMixtureAtom_default_instance_;
    new (ptr) ::UnivariateMixtureAtom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnivariateMixtureAtom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_UnivariateMixtureState_univariate_5fmixture_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnivariateMixtureState_default_instance_;
    new (ptr) ::UnivariateMixtureState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnivariateMixtureState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnivariateMixtureState_univariate_5fmixture_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnivariateMixtureState_univariate_5fmixture_5fstate_2eproto}, {
      &scc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_UnivariateState_univariate_5fmixture_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnivariateState_default_instance_;
    new (ptr) ::UnivariateState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnivariateState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UnivariateState_univariate_5fmixture_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UnivariateState_univariate_5fmixture_5fstate_2eproto}, {
      &scc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto.base,
      &scc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto.base,
      &scc_info_EigenMatrix_eigen_2eproto.base,}};

static void InitDefaultsscc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnivariateState_GroupParams_default_instance_;
    new (ptr) ::UnivariateState_GroupParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnivariateState_GroupParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_univariate_5fmixture_5fstate_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_univariate_5fmixture_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_univariate_5fmixture_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_univariate_5fmixture_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureAtom, mean_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureAtom, stdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, num_components_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, weights_),
  PROTOBUF_FIELD_OFFSET(::UnivariateMixtureState, atoms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnivariateState_GroupParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnivariateState_GroupParams, weights_),
  PROTOBUF_FIELD_OFFSET(::UnivariateState_GroupParams, cluster_allocs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnivariateState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnivariateState, num_components_),
  PROTOBUF_FIELD_OFFSET(::UnivariateState, atoms_),
  PROTOBUF_FIELD_OFFSET(::UnivariateState, groupparams_),
  PROTOBUF_FIELD_OFFSET(::UnivariateState, rho_),
  PROTOBUF_FIELD_OFFSET(::UnivariateState, sigma_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UnivariateMixtureAtom)},
  { 7, -1, sizeof(::UnivariateMixtureState)},
  { 15, -1, sizeof(::UnivariateState_GroupParams)},
  { 22, -1, sizeof(::UnivariateState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnivariateMixtureAtom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnivariateMixtureState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnivariateState_GroupParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnivariateState_default_instance_),
};

const char descriptor_table_protodef_univariate_5fmixture_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036univariate_mixture_state.proto\032\013eigen."
  "proto\"4\n\025UnivariateMixtureAtom\022\014\n\004mean\030\001"
  " \001(\001\022\r\n\005stdev\030\002 \001(\001\"l\n\026UnivariateMixture"
  "State\022\026\n\016num_components\030\001 \001(\005\022\023\n\007weights"
  "\030\002 \003(\001B\002\020\001\022%\n\005atoms\030\003 \003(\0132\026.UnivariateMi"
  "xtureAtom\"\355\001\n\017UnivariateState\022\026\n\016num_com"
  "ponents\030\001 \001(\005\022%\n\005atoms\030\002 \003(\0132\026.Univariat"
  "eMixtureAtom\0221\n\013groupParams\030\003 \003(\0132\034.Univ"
  "ariateState.GroupParams\022\013\n\003rho\030\004 \001(\001\022\033\n\005"
  "Sigma\030\005 \001(\0132\014.EigenMatrix\032>\n\013GroupParams"
  "\022\023\n\007weights\030\001 \003(\001B\002\020\001\022\032\n\016cluster_allocs\030"
  "\002 \003(\005B\002\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_univariate_5fmixture_5fstate_2eproto_deps[1] = {
  &::descriptor_table_eigen_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_univariate_5fmixture_5fstate_2eproto_sccs[4] = {
  &scc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto.base,
  &scc_info_UnivariateMixtureState_univariate_5fmixture_5fstate_2eproto.base,
  &scc_info_UnivariateState_univariate_5fmixture_5fstate_2eproto.base,
  &scc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_univariate_5fmixture_5fstate_2eproto_once;
static bool descriptor_table_univariate_5fmixture_5fstate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_univariate_5fmixture_5fstate_2eproto = {
  &descriptor_table_univariate_5fmixture_5fstate_2eproto_initialized, descriptor_table_protodef_univariate_5fmixture_5fstate_2eproto, "univariate_mixture_state.proto", 457,
  &descriptor_table_univariate_5fmixture_5fstate_2eproto_once, descriptor_table_univariate_5fmixture_5fstate_2eproto_sccs, descriptor_table_univariate_5fmixture_5fstate_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_univariate_5fmixture_5fstate_2eproto::offsets,
  file_level_metadata_univariate_5fmixture_5fstate_2eproto, 4, file_level_enum_descriptors_univariate_5fmixture_5fstate_2eproto, file_level_service_descriptors_univariate_5fmixture_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_univariate_5fmixture_5fstate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_univariate_5fmixture_5fstate_2eproto), true);

// ===================================================================

void UnivariateMixtureAtom::InitAsDefaultInstance() {
}
class UnivariateMixtureAtom::_Internal {
 public:
};

UnivariateMixtureAtom::UnivariateMixtureAtom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnivariateMixtureAtom)
}
UnivariateMixtureAtom::UnivariateMixtureAtom(const UnivariateMixtureAtom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&stdev_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(stdev_));
  // @@protoc_insertion_point(copy_constructor:UnivariateMixtureAtom)
}

void UnivariateMixtureAtom::SharedCtor() {
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stdev_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(stdev_));
}

UnivariateMixtureAtom::~UnivariateMixtureAtom() {
  // @@protoc_insertion_point(destructor:UnivariateMixtureAtom)
  SharedDtor();
}

void UnivariateMixtureAtom::SharedDtor() {
}

void UnivariateMixtureAtom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnivariateMixtureAtom& UnivariateMixtureAtom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnivariateMixtureAtom_univariate_5fmixture_5fstate_2eproto.base);
  return *internal_default_instance();
}


void UnivariateMixtureAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:UnivariateMixtureAtom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stdev_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(stdev_));
  _internal_metadata_.Clear();
}

const char* UnivariateMixtureAtom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stdev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stdev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnivariateMixtureAtom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnivariateMixtureAtom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mean = 1;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mean(), target);
  }

  // double stdev = 2;
  if (!(this->stdev() <= 0 && this->stdev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stdev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnivariateMixtureAtom)
  return target;
}

size_t UnivariateMixtureAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnivariateMixtureAtom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mean = 1;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 8;
  }

  // double stdev = 2;
  if (!(this->stdev() <= 0 && this->stdev() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnivariateMixtureAtom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnivariateMixtureAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const UnivariateMixtureAtom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnivariateMixtureAtom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnivariateMixtureAtom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnivariateMixtureAtom)
    MergeFrom(*source);
  }
}

void UnivariateMixtureAtom::MergeFrom(const UnivariateMixtureAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnivariateMixtureAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
  if (!(from.stdev() <= 0 && from.stdev() >= 0)) {
    _internal_set_stdev(from._internal_stdev());
  }
}

void UnivariateMixtureAtom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnivariateMixtureAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnivariateMixtureAtom::CopyFrom(const UnivariateMixtureAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnivariateMixtureAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnivariateMixtureAtom::IsInitialized() const {
  return true;
}

void UnivariateMixtureAtom::InternalSwap(UnivariateMixtureAtom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mean_, other->mean_);
  swap(stdev_, other->stdev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnivariateMixtureAtom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnivariateMixtureState::InitAsDefaultInstance() {
}
class UnivariateMixtureState::_Internal {
 public:
};

UnivariateMixtureState::UnivariateMixtureState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnivariateMixtureState)
}
UnivariateMixtureState::UnivariateMixtureState(const UnivariateMixtureState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      weights_(from.weights_),
      atoms_(from.atoms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_components_ = from.num_components_;
  // @@protoc_insertion_point(copy_constructor:UnivariateMixtureState)
}

void UnivariateMixtureState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnivariateMixtureState_univariate_5fmixture_5fstate_2eproto.base);
  num_components_ = 0;
}

UnivariateMixtureState::~UnivariateMixtureState() {
  // @@protoc_insertion_point(destructor:UnivariateMixtureState)
  SharedDtor();
}

void UnivariateMixtureState::SharedDtor() {
}

void UnivariateMixtureState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnivariateMixtureState& UnivariateMixtureState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnivariateMixtureState_univariate_5fmixture_5fstate_2eproto.base);
  return *internal_default_instance();
}


void UnivariateMixtureState::Clear() {
// @@protoc_insertion_point(message_clear_start:UnivariateMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  atoms_.Clear();
  num_components_ = 0;
  _internal_metadata_.Clear();
}

const char* UnivariateMixtureState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_components = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_components_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double weights = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .UnivariateMixtureAtom atoms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_atoms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnivariateMixtureState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnivariateMixtureState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_components = 1;
  if (this->num_components() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_components(), target);
  }

  // repeated double weights = 2 [packed = true];
  if (this->_internal_weights_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_weights(), target);
  }

  // repeated .UnivariateMixtureAtom atoms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_atoms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_atoms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnivariateMixtureState)
  return target;
}

size_t UnivariateMixtureState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnivariateMixtureState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double weights = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weights_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .UnivariateMixtureAtom atoms = 3;
  total_size += 1UL * this->_internal_atoms_size();
  for (const auto& msg : this->atoms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 num_components = 1;
  if (this->num_components() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_components());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnivariateMixtureState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnivariateMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  const UnivariateMixtureState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnivariateMixtureState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnivariateMixtureState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnivariateMixtureState)
    MergeFrom(*source);
  }
}

void UnivariateMixtureState::MergeFrom(const UnivariateMixtureState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnivariateMixtureState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  atoms_.MergeFrom(from.atoms_);
  if (from.num_components() != 0) {
    _internal_set_num_components(from._internal_num_components());
  }
}

void UnivariateMixtureState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnivariateMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnivariateMixtureState::CopyFrom(const UnivariateMixtureState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnivariateMixtureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnivariateMixtureState::IsInitialized() const {
  return true;
}

void UnivariateMixtureState::InternalSwap(UnivariateMixtureState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  weights_.InternalSwap(&other->weights_);
  atoms_.InternalSwap(&other->atoms_);
  swap(num_components_, other->num_components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnivariateMixtureState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnivariateState_GroupParams::InitAsDefaultInstance() {
}
class UnivariateState_GroupParams::_Internal {
 public:
};

UnivariateState_GroupParams::UnivariateState_GroupParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnivariateState.GroupParams)
}
UnivariateState_GroupParams::UnivariateState_GroupParams(const UnivariateState_GroupParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      weights_(from.weights_),
      cluster_allocs_(from.cluster_allocs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UnivariateState.GroupParams)
}

void UnivariateState_GroupParams::SharedCtor() {
}

UnivariateState_GroupParams::~UnivariateState_GroupParams() {
  // @@protoc_insertion_point(destructor:UnivariateState.GroupParams)
  SharedDtor();
}

void UnivariateState_GroupParams::SharedDtor() {
}

void UnivariateState_GroupParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnivariateState_GroupParams& UnivariateState_GroupParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnivariateState_GroupParams_univariate_5fmixture_5fstate_2eproto.base);
  return *internal_default_instance();
}


void UnivariateState_GroupParams::Clear() {
// @@protoc_insertion_point(message_clear_start:UnivariateState.GroupParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  cluster_allocs_.Clear();
  _internal_metadata_.Clear();
}

const char* UnivariateState_GroupParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double weights = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 cluster_allocs = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cluster_allocs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_cluster_allocs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnivariateState_GroupParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnivariateState.GroupParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double weights = 1 [packed = true];
  if (this->_internal_weights_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_weights(), target);
  }

  // repeated int32 cluster_allocs = 2 [packed = true];
  {
    int byte_size = _cluster_allocs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_cluster_allocs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnivariateState.GroupParams)
  return target;
}

size_t UnivariateState_GroupParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnivariateState.GroupParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double weights = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weights_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cluster_allocs = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cluster_allocs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cluster_allocs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnivariateState_GroupParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnivariateState.GroupParams)
  GOOGLE_DCHECK_NE(&from, this);
  const UnivariateState_GroupParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnivariateState_GroupParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnivariateState.GroupParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnivariateState.GroupParams)
    MergeFrom(*source);
  }
}

void UnivariateState_GroupParams::MergeFrom(const UnivariateState_GroupParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnivariateState.GroupParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  cluster_allocs_.MergeFrom(from.cluster_allocs_);
}

void UnivariateState_GroupParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnivariateState.GroupParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnivariateState_GroupParams::CopyFrom(const UnivariateState_GroupParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnivariateState.GroupParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnivariateState_GroupParams::IsInitialized() const {
  return true;
}

void UnivariateState_GroupParams::InternalSwap(UnivariateState_GroupParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  weights_.InternalSwap(&other->weights_);
  cluster_allocs_.InternalSwap(&other->cluster_allocs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnivariateState_GroupParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnivariateState::InitAsDefaultInstance() {
  ::_UnivariateState_default_instance_._instance.get_mutable()->sigma_ = const_cast< ::EigenMatrix*>(
      ::EigenMatrix::internal_default_instance());
}
class UnivariateState::_Internal {
 public:
  static const ::EigenMatrix& sigma(const UnivariateState* msg);
};

const ::EigenMatrix&
UnivariateState::_Internal::sigma(const UnivariateState* msg) {
  return *msg->sigma_;
}
void UnivariateState::clear_sigma() {
  if (GetArenaNoVirtual() == nullptr && sigma_ != nullptr) {
    delete sigma_;
  }
  sigma_ = nullptr;
}
UnivariateState::UnivariateState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnivariateState)
}
UnivariateState::UnivariateState(const UnivariateState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      atoms_(from.atoms_),
      groupparams_(from.groupparams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sigma()) {
    sigma_ = new ::EigenMatrix(*from.sigma_);
  } else {
    sigma_ = nullptr;
  }
  ::memcpy(&rho_, &from.rho_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_components_) -
    reinterpret_cast<char*>(&rho_)) + sizeof(num_components_));
  // @@protoc_insertion_point(copy_constructor:UnivariateState)
}

void UnivariateState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnivariateState_univariate_5fmixture_5fstate_2eproto.base);
  ::memset(&sigma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_components_) -
      reinterpret_cast<char*>(&sigma_)) + sizeof(num_components_));
}

UnivariateState::~UnivariateState() {
  // @@protoc_insertion_point(destructor:UnivariateState)
  SharedDtor();
}

void UnivariateState::SharedDtor() {
  if (this != internal_default_instance()) delete sigma_;
}

void UnivariateState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnivariateState& UnivariateState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnivariateState_univariate_5fmixture_5fstate_2eproto.base);
  return *internal_default_instance();
}


void UnivariateState::Clear() {
// @@protoc_insertion_point(message_clear_start:UnivariateState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atoms_.Clear();
  groupparams_.Clear();
  if (GetArenaNoVirtual() == nullptr && sigma_ != nullptr) {
    delete sigma_;
  }
  sigma_ = nullptr;
  ::memset(&rho_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_components_) -
      reinterpret_cast<char*>(&rho_)) + sizeof(num_components_));
  _internal_metadata_.Clear();
}

const char* UnivariateState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_components = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_components_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .UnivariateMixtureAtom atoms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_atoms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .UnivariateState.GroupParams groupParams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // double rho = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rho_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .EigenMatrix Sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnivariateState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnivariateState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_components = 1;
  if (this->num_components() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_components(), target);
  }

  // repeated .UnivariateMixtureAtom atoms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_atoms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_atoms(i), target, stream);
  }

  // repeated .UnivariateState.GroupParams groupParams = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupparams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groupparams(i), target, stream);
  }

  // double rho = 4;
  if (!(this->rho() <= 0 && this->rho() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rho(), target);
  }

  // .EigenMatrix Sigma = 5;
  if (this->has_sigma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sigma(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnivariateState)
  return target;
}

size_t UnivariateState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnivariateState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UnivariateMixtureAtom atoms = 2;
  total_size += 1UL * this->_internal_atoms_size();
  for (const auto& msg : this->atoms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UnivariateState.GroupParams groupParams = 3;
  total_size += 1UL * this->_internal_groupparams_size();
  for (const auto& msg : this->groupparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .EigenMatrix Sigma = 5;
  if (this->has_sigma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sigma_);
  }

  // double rho = 4;
  if (!(this->rho() <= 0 && this->rho() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 num_components = 1;
  if (this->num_components() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_components());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnivariateState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnivariateState)
  GOOGLE_DCHECK_NE(&from, this);
  const UnivariateState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnivariateState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnivariateState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnivariateState)
    MergeFrom(*source);
  }
}

void UnivariateState::MergeFrom(const UnivariateState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnivariateState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atoms_.MergeFrom(from.atoms_);
  groupparams_.MergeFrom(from.groupparams_);
  if (from.has_sigma()) {
    _internal_mutable_sigma()->::EigenMatrix::MergeFrom(from._internal_sigma());
  }
  if (!(from.rho() <= 0 && from.rho() >= 0)) {
    _internal_set_rho(from._internal_rho());
  }
  if (from.num_components() != 0) {
    _internal_set_num_components(from._internal_num_components());
  }
}

void UnivariateState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnivariateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnivariateState::CopyFrom(const UnivariateState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnivariateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnivariateState::IsInitialized() const {
  return true;
}

void UnivariateState::InternalSwap(UnivariateState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  atoms_.InternalSwap(&other->atoms_);
  groupparams_.InternalSwap(&other->groupparams_);
  swap(sigma_, other->sigma_);
  swap(rho_, other->rho_);
  swap(num_components_, other->num_components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnivariateState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UnivariateMixtureAtom* Arena::CreateMaybeMessage< ::UnivariateMixtureAtom >(Arena* arena) {
  return Arena::CreateInternal< ::UnivariateMixtureAtom >(arena);
}
template<> PROTOBUF_NOINLINE ::UnivariateMixtureState* Arena::CreateMaybeMessage< ::UnivariateMixtureState >(Arena* arena) {
  return Arena::CreateInternal< ::UnivariateMixtureState >(arena);
}
template<> PROTOBUF_NOINLINE ::UnivariateState_GroupParams* Arena::CreateMaybeMessage< ::UnivariateState_GroupParams >(Arena* arena) {
  return Arena::CreateInternal< ::UnivariateState_GroupParams >(arena);
}
template<> PROTOBUF_NOINLINE ::UnivariateState* Arena::CreateMaybeMessage< ::UnivariateState >(Arena* arena) {
  return Arena::CreateInternal< ::UnivariateState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
